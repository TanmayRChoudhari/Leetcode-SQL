1757. Recyclable and Low Fat Products: https://leetcode.com/problems/recyclable-and-low-fat-products/?envType=study-plan-v2&envId=top-sql-50

SELECT      product_id
FROM        products
WHERE       low_fats    = 'Y'
AND         recyclable  = 'Y' ;

584. Find Customer Referee: https://leetcode.com/problems/find-customer-referee/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      name
FROM        customer
WHERE       referee_id <> 2 
OR          referee_id IS NULL ;


595. Big Countries :https://leetcode.com/problems/big-countries/?envType=study-plan-v2&envId=top-sql-50

SELECT      name
            ,population
            ,area
FROM        world
WHERE       area        >=  3000000
OR          population  >=  25000000 ;

1148. Article Views I: https://leetcode.com/problems/article-views-i/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      DISTINCT author_id AS id
FROM        views
WHERE       author_id = viewer_id
ORDER BY    1 ;

1683. Invalid Tweets:https://leetcode.com/problems/invalid-tweets/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      tweet_id
FROM        tweets
WHERE       LENGTH(content) > 15 ;

1378. Replace Employee ID With The Unique Identifier: https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      unique_id
            ,name
FROM        employees   e
LEFT JOIN   employeeuni u
ON          e.id        =   u.id ;

1068. Product Sales Analysis I: https://leetcode.com/problems/product-sales-analysis-i/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      product_name
            ,year
            ,price
FROM        sales   s
LEFT JOIN   product p
ON          s.product_id    =   p.product_id ;

1581. Customer Who Visited but Did Not Make Any Transactions: https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/description/?envType=study-plan-v2&envId=top-sql-50

SELECT      customer_id
            ,COUNT(visit_id) AS count_no_trans 
FROM        visits    c
WHERE       visit_id NOT IN (SELECT visit_id FROM transactions)
GROUP BY    1 ;











 
